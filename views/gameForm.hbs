<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>{{title}}</title>
  <link rel="stylesheet" href="/styles.css">
  <meta name="viewport" content="width=device-width,initial-scale=1">
</head>

<body>
  {{> navbar user=user}}
      <form id="quizForm"
            method="post"
            action="{{#if isEdit}}/game/update/{{game.gameid}}{{else}}/game/save{{/if}}"
            autocomplete="off">
  <div class="container creator-wrap">
    <!-- ───── SIDEBAR ───── -->
    <div class="creator-side card">


        <label>Title</label>
        <input name="title" value="{{game.title}}" required>

        <label>Description</label>
        <textarea name="description" rows="6">{{game.description}}</textarea>

        <label>Category</label>
        <select name="category_id" required>
          {{#each categories}}
            <option value="{{id}}" {{#if (eq ../game.category_id id)}}selected{{/if}}>
              {{name}}
            </option>
          {{/each}}
        </select>

        <button class="btn primary" type="submit" style="width:100%;margin-top:1rem">
          Save&nbsp;Game
        </button>
    </div>

    <!-- ───── QUESTIONS AREA ───── -->
    <div class="creator-questions">
      <h2>Questions (<span id="qCount">{{questions.length}}</span>)</h2>

      <div id="q-container">
        {{#each questions}}
          {{> questionRow idx=@index q=this}}
        {{/each}}
      </div>

      <div class="add-bar" id="addQ">+ add a new question</div>
    </div>
  </div>
        </form>


  <!-- ───── PARTIALS ───── -->
  {{#*inline "questionRow"}}
  <div class="q-row">
    <div class="q-header">
      <h3>Q{{inc idx}}</h3>

      <select name="type" class="q-type">
        <option value="truefalse"  {{#if (eq q.type "truefalse")}}selected{{/if}}>True/False</option>
        <option value="num"        {{#if (eq q.type "num")}}selected{{/if}}>Number</option>
        <option value="multiselect"{{#if (eq q.type "multiselect")}}selected{{/if}}>Multi‑select</option>
        <option value="type"       {{#if (eq q.type "type")}}selected{{/if}}>Text</option>
      </select>

      <button type="button" class="btn secondary dupQ">Duplicate</button>
      <button type="button" class="btn danger delQ">Delete</button>
      <button type="button" class="btn primary autoQ">Generate</button>
    </div>

    <input name="question" value="{{q.question}}" placeholder="Question" required>

    <div class="block-truefalse">
      <select name="correct">
        <option value="true"  {{#if (eq q.correct "true")}}selected{{/if}}>True</option>
        <option value="false" {{#if (eq q.correct "false")}}selected{{/if}}>False</option>
      </select>
       <input type="hidden" name="option1" value="">
  <input type="hidden" name="option2" value="">
 <input type="hidden" name="option3" value="">
    </div>

    <div class="block-num">
      <input type="number" name="correct" value="{{q.correct}}"   placeholder="Correct number">
      <input type="number" name="option1" value="{{q.option1}}"  placeholder="Min">
      <input type="number" name="option2" value="{{q.option2}}"  placeholder="Max">
      <input type="hidden" name="option3" value="">
    </div>

    <div class="block-type">
      <input name="correct" value="{{q.correct}}" placeholder="Correct answer">
      <input type="hidden" name="option1" value="">
      <input type="hidden" name="option2" value="">
      <input type="hidden" name="option3" value="">
    </div>

    <div class="block-multi">
      <input name="correct" value="{{q.correct}}"  placeholder="Correct answer">
      <input name="option1" value="{{q.option1}}"  placeholder="Option 1">
      <input name="option2" value="{{q.option2}}"  placeholder="Option 2">
      <input name="option3" value="{{q.option3}}"  placeholder="Option 3">
    </div>
  </div>
  {{/inline}}

  <template id="blankRow">
    {{> questionRow idx=0 q=(object) }}
  </template>

<script>
const decode = s => { const t=document.createElement('textarea'); t.innerHTML=s; return t.value; };

function adjustRow(row){
  const t = row.querySelector('.q-type').value;

  const blocks = {
    truefalse : row.querySelector('.block-truefalse'),
    num       : row.querySelector('.block-num'),
    type      : row.querySelector('.block-type'),
    multiselect:row.querySelector('.block-multi')
  };

  for (const [key, div] of Object.entries(blocks)){
    const on = (key === t); 
    div.style.display = on ? '' : 'none';
    div.querySelectorAll('input,select').forEach(el=>{
      el.disabled = !on; 
    });
  }
}



// ADD, DUPLICATE, DELETE
const container = document.getElementById('q-container');
function updateCount(){
  document.getElementById('qCount').textContent = container.children.length;
  [...container.children].forEach((r,i)=> r.querySelector('h3').textContent = 'Q'+(i+1));
}

document.getElementById('addQ').onclick = ()=>{
  const tpl = document.getElementById('blankRow').content.cloneNode(true);
  container.appendChild(tpl);
  adjustRow(container.lastElementChild);
  updateCount();
};

container.addEventListener('click', e=>{
  const row = e.target.closest('.q-row');
  if(!row) return;

  if(e.target.classList.contains('delQ')){
    row.remove(); updateCount(); return;
  }
  if(e.target.classList.contains('dupQ')){
    const clone = row.cloneNode(true);
    row.after(clone); updateCount(); return;
  }
  if(e.target.classList.contains('autoQ')){
    autoGenerate(row, e.target);
  }
});

container.addEventListener('change', e=>{
  if(e.target.classList.contains('q-type')){
    adjustRow(e.target.closest('.q-row'));
  }
});

// AUTO-GENERATE, API STUFF
let lastFetchTime = 0;

async function fetchQuestion(row){
  lastFetchTime = Date.now();

  const typeSel = row.querySelector('.q-type').value;
  const apiType = (typeSel==='truefalse') ? 'boolean' : 'multiple';
  const cat     = document.querySelector('select[name="category_id"]').value;
  let url = `https://opentdb.com/api.php?amount=1&type=${apiType}`;
  if(cat) url += `&category=${cat}`;

  try{
    const data = await fetch(url).then(r=>r.json());
    if(!data.results || !data.results.length) return;
    const q = data.results[0];

    row.querySelector('input[name="question"]').value = decode(q.question);

    if(typeSel==='truefalse'){
      row.querySelector('.block-truefalse select[name="correct"]')
         .value = q.correct_answer.toLowerCase();
    }else{ /* multiselect */
      const blk = row.querySelector('.block-multi');
      const correct   = decode(q.correct_answer);
      const incorrect = q.incorrect_answers.map(decode);

      blk.querySelector('input[name="correct"]').value = correct;
      blk.querySelector('input[name="option1"]').value = incorrect[0] || '';
      blk.querySelector('input[name="option2"]').value = incorrect[1] || '';
      blk.querySelector('input[name="option3"]').value = incorrect[2] || '';
    }
  }catch(err){ console.error(err); }
}

function autoGenerate(row, btn){
  if(btn.disabled) return;

// 7000ms cooldown between requests because i keep getting 429 errors
  const wait = Math.max(0, 7000 - (Date.now() - lastFetchTime));
  const original = btn.textContent;
  btn.disabled = true;
  btn.textContent = 'Loading…';

  setTimeout(async ()=>{
    await fetchQuestion(row);
    btn.disabled = false;
    btn.textContent = original;
  }, wait);
}

//init existing rows
document.querySelectorAll('.q-row').forEach(adjustRow);
</script>
</body>
</html>
